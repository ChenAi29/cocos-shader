// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }
        center: {
          value: [0.5, 0.5],
          editor: {
            tooltip: "圆点"
          }
        }
        radius: {
          value: 0.5,
          editor: {
            tooltip: "半径"
          }
        }
        ratio: {
          value: 1,
          editor: {
            tooltip: "宽高比"
          }
        }
        blur: {
          value: 0.01,
          editor: {
            tooltip: "模糊程度"
          }
        }
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;
  
  #include <alpha-test>
  #include <texture>

  in vec4 v_color;

  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  #endif

  #if CIRCLE_CUT
  uniform CircleCut{
    vec2 center;
    float radius;
    float ratio;
    float blur;
  };
  #endif

  void main () {
    vec4 o = vec4(1, 1, 1, 1);

    #if USE_TEXTURE
      CCTexture(texture, v_uv0, o);
    #endif

    o *= v_color;

    ALPHA_TEST(o);

    #if CIRCLE_CUT
    float circle = radius*radius;
    float rx = center.x*ratio;
    float ry = center.y;
    float dis = (v_uv0.x*ratio-rx)*(v_uv0.x*ratio-rx)+(v_uv0.y-ry)*(v_uv0.y-ry);
    o.a = smoothstep(circle, circle-blur, dis)*o.a;
    #endif

    gl_FragColor = o;
  }
}%
