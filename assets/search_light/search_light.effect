// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }
        u_tex_size: { value: [1920, 1080], tooltip: "分辨率" }
        u_resolution: { value: [1920, 1080], tooltip: "分辨率" }
        u_mouse: { value: [960, 540], tooltip: "鼠标" }
        u_radius: { value: [100, 100], tooltip: "半径" }
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;
  
  #include <alpha-test>
  #include <texture>

  in vec4 v_color;

  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  #endif

  uniform SearchLight {
    vec2 u_tex_size;
    vec2 u_resolution;
    vec2 u_mouse;
    vec2 u_radius;
  };

  void main () {
    vec2 mouse = vec2(u_mouse.x, u_resolution.y-u_mouse.y);
    vec4 color = texture2D(texture, v_uv0);
    vec2 dir = (v_uv0*u_tex_size.xy + (u_resolution.xy-u_tex_size.xy)/2.0)-mouse.xy;
    float r = dot(dir, dir)/dot(u_radius, u_radius);
    color *= 1.08-r;
    gl_FragColor = vec4(color.rgb, 0.75);
  }
}%
