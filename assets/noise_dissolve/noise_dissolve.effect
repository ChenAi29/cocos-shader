// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        noiseTexture: { value: white }
        alphaThreshold: { value: 0.5 }
        texSize: { value: [800, 800] }
        noiseTexSize: { value: [1200, 1200] }
        dissolve: { value: 0.0, editor: { range: [0.0, 1.0], tooltip: "溶解程度" } }
        colorWidth: { value: 0.1, editor: { range: [0.0, 0.3], tooltip: "颜色宽度" } }
        burnColorInner: { value: [1.0, 1.0, 0.0, 1.0], editor: {type: color } }
        burnColorOutter: { value: [1.0, 0.0, 0.0, 1.0], editor: {type: color } }
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;
  
  #include <alpha-test>
  #include <texture>

  in vec4 v_color;

  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  uniform sampler2D noiseTexture;
  #endif

  uniform NoiseDissolve {
    vec4 burnColorInner;
    vec4 burnColorOutter;
    vec2 texSize;
    vec2 noiseTexSize;
    float dissolve;
    float colorWidth;
  };

  vec3 lerp(vec3 a, vec3 b, float t) {
    return a+(b-a)*t;
  }

  void main () {
    vec4 noise = vec4(1.0, 1.0, 1.0, 1.0);
    CCTexture(noiseTexture, v_uv0*(texSize.xy/noiseTexSize.xy), noise);
    if(noise.r < dissolve){
      discard;
    }

    vec4 o = vec4(1.0, 1.0, 1.0, 1.0);
    CCTexture(texture, v_uv0, o);
    float t = 1.0 - smoothstep(0.0, colorWidth, noise.r - dissolve);
    vec3 burnColor = lerp(burnColorInner.rgb, burnColorOutter.rgb, t);
    o.rgb = lerp(o.rgb, burnColor.rgb,  t*step(0.0001, dissolve ));
    o *= v_color;

    ALPHA_TEST(o);

    gl_FragColor = o;
  }
}%
