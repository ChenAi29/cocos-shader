// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }
        texSize: { value: [1920, 1080], editor: { tooltip: "图片尺寸" } }
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;
  
  #include <alpha-test>
  #include <texture>

  in vec4 v_color;

  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  #endif

  const float BLUR_RADIUS = 20.0;

  uniform GassuianBlur {
    vec2 texSize;
  };

  vec4 getBlurColor(vec2 pos) {
    vec4 color = vec4(0);
    float sum = 0.0;
    // 卷积过程
    for(float r = -BLUR_RADIUS; r <= BLUR_RADIUS; r++) {
      for(float c = -BLUR_RADIUS; c <= BLUR_RADIUS; c++) {
        vec2 target = pos+vec2(r/texSize.x, c/texSize.y);
        float weight = (BLUR_RADIUS-abs(r))*(BLUR_RADIUS-abs(c));
        color += texture2D(texture, target)*weight;
        sum += weight;
      }
    }
    color /= sum;
    return color;
  }

  void main () {
    vec4 color = getBlurColor(v_uv0);
    color.a = v_color.a;
    gl_FragColor = color;
  }
}%
