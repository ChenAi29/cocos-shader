// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties: 
        texture: { value: white }
        alphaThreshold: { value: 0.5 }
        color: { value: [1, 1, 1, 1], editor: { type: color, tooltip: "颜色" } }
        texSize: { value: [1920, 1080], editor: { tooltip: "图片大小" } }
        iResolution: { value: [1920, 1080, 0, 0], editor: { tooltip: "分辨率"} }
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;
  
  #include <alpha-test>
  #include <texture>
  #include <cc-global>

  in vec4 v_color;

  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  #endif

  uniform HearRain {
    vec4 iResolution;
    vec4 color;
    vec2 texSize;
  };

  vec3 N13(float p) {
    //  from DAVE HOSKINS
   vec3 p3 = fract(vec3(p) * vec3(.1031,.11369,.13787));
   p3 += dot(p3, p3.yzx + 19.19);
   return fract(vec3((p3.x + p3.y)*p3.z, (p3.x+p3.z)*p3.y, (p3.y+p3.z)*p3.x));
  }

  vec4 N14(float t) {
  	return fract(sin(t*vec4(123., 1024., 1456., 264.))*vec4(6547., 345., 8799., 1564.));
  }
  float N(float t) {
      return fract(sin(t*12345.564)*7658.76);
  }

  float Saw(float b, float t) {
  	return smoothstep(0., b, t)*smoothstep(1., b, t);
  }


  vec2 DropLayer2(vec2 uv, float t) {
    vec2 UV = uv;
    
    uv.y += t*0.75;
    vec2 a = vec2(6., 1.);
    vec2 grid = a*2.;
    vec2 id = floor(uv*grid);
    
    float colShift = N(id.x); 
    uv.y += colShift;
    
    id = floor(uv*grid);
    vec3 n = N13(id.x*35.2+id.y*2376.1);
    vec2 st = fract(uv*grid)-vec2(.5, 0);
    
    float x = n.x-.5;
    
    float y = UV.y*20.;
    float wiggle = sin(y+sin(y));
    x += wiggle*(.5-abs(x))*(n.z-.5);
    x *= .7;
      float ti = fract(t+n.z);
      y = (Saw(.85, ti)-.5)*.9+.5;
      vec2 p = vec2(x, y);
      
      float d = length((st-p)*a.yx);
      
      float mainDrop = smoothstep(.4, .0, d);
      
      float r = sqrt(smoothstep(1., y, st.y));
      float cd = abs(st.x-x);
      float trail = smoothstep(.23*r, .15*r*r, cd);
      float trailFront = smoothstep(-.02, .02, st.y-y);
      trail *= trailFront*r*r;
      
      y = UV.y;
      float trail2 = smoothstep(.2*r, .0, cd);
      float droplets = max(0., (sin(y*(1.-y)*120.)-st.y))*trail2*trailFront*n.z;
      y = fract(y*10.)+(st.y-.5);
      float dd = length(st-vec2(x, y));
      droplets = smoothstep(.3, 0., dd);
      float m = mainDrop+droplets*r*trailFront;
      
      //m += st.x>a.y*.45 || st.y>a.x*.165 ? 1.2 : 0.;
      return vec2(m, trail);
  }

  float StaticDrops(vec2 uv, float t) {
  	uv *= 40.;

      vec2 id = floor(uv);
      uv = fract(uv)-.5;
      vec3 n = N13(id.x*107.45+id.y*3543.654);
      vec2 p = (n.xy-.5)*.7;
      float d = length(uv-p);

      float fade = Saw(.025, fract(t+n.z));
      float c = smoothstep(.3, 0., d)*fract(n.z*10.)*fade;
      return c;
  }

  vec2 Drops(vec2 uv, float t, float l0, float l1, float l2) {
      float s = StaticDrops(uv, t)*l0; 
      vec2 m1 = DropLayer2(uv, t)*l1;
      vec2 m2 = DropLayer2(uv*1.85, t)*l2;

      float c = s+m1.x+m2.x;
      c = smoothstep(.3, 1., c);

      return vec2(c, max(m1.y*l0, m2.y*l1));
  }

  void main () {
    vec4 iMouse = vec4(0.0, 0.0, 0.0, 0.0);

    vec2 fragCoord = vec2(v_uv0.x * texSize.x, v_uv0.y * texSize.y);
    vec2 uv = -(fragCoord.xy-.5*iResolution.xy) / iResolution.y;
    vec2 UV = fragCoord.xy/iResolution.xy;
    vec3 M = iMouse.xyz/iResolution.xyz;
    float T = cc_time.x+M.x*2.;
    
    #if HAS_HEART
    T = mod(cc_time.x, 102.);
    T = mix(T, M.x*102., M.z>0.?1.:0.);
    #endif
    
    
    float t = T*.2;
    
    float rainAmount = iMouse.z>0. ? M.y : sin(T*.05)*.3+.7;
    
    float maxBlur = mix(3., 6., rainAmount);
    float minBlur = 2.;
    
    float story = 0.;
    float heart = 0.;
    
    #if HAS_HEART
    story = smoothstep(0., 70., T);
    
    t = min(1., T/70.);						// remap drop time so it goes slower when it freezes
    t = 1.-t;
    t = (1.-t*t)*70.;
    
    float zoom= mix(.3, 1.2, story);		// slowly zoom out
    uv *=zoom;
    minBlur = 4.+smoothstep(.5, 1., story)*3.;		// more opaque glass towards the end
    maxBlur = 6.+smoothstep(.5, 1., story)*1.5;
    
    vec2 hv = uv-vec2(.0, -.1);				// build heart
    hv.x *= .5;
    float s = smoothstep(110., 70., T);				// heart gets smaller and fades towards the end
    hv.y-=sqrt(abs(hv.x))*.5*s;
    heart = length(hv);
    heart = smoothstep(.4*s, .2*s, heart)*s;
    rainAmount = heart;						// the rain is where the heart is
    
    maxBlur-=heart;							// inside the heart slighly less foggy
    uv *= 1.5;								// zoom out a bit more
    t *= .25;
    #else
    float zoom = -cos(T*.2);
    uv *= .7+zoom*.3;
    #endif
    UV = (UV-.5)*(.9+zoom*.1)+.5;
    
    float staticDrops = smoothstep(-.5, 1., rainAmount)*2.;
    float layer1 = smoothstep(.25, .75, rainAmount);
    float layer2 = smoothstep(.0, .5, rainAmount);
    
    
    vec2 c = Drops(uv, t, staticDrops, layer1, layer2);
    // dFdx 不知道是什么 暂时注释
    // #if CHEAP_NORMALS
    // 	vec2 n = vec2(dFdx(c.x), dFdy(c.x));// cheap normals (3x cheaper, but 2 times shittier ;))
    // #else
    	vec2 e = vec2(.001, 0.);
    	float cx = Drops(uv+e, t, staticDrops, layer1, layer2).x;
    	float cy = Drops(uv+e.yx, t, staticDrops, layer1, layer2).x;
    	vec2 n = vec2(cx-c.x, cy-c.x);		// expensive normals
    // #endif
    
    
    #if HAS_HEART
    n *= 1.-smoothstep(60., 85., T);
    c.y *= 1.-smoothstep(80., 100., T)*.8;
    #endif
    
    float focus = mix(maxBlur-c.y, minBlur, smoothstep(.1, .2, c.x));
    // vec3 col = texture2D(texture, UV+n, focus).rgb;
    vec3 col = texture2D(texture, UV+n).rgb;
    
    
    #if USE_POST_PROCESSING
      t = (T+3.)*.5;										// make time sync with first lightnoing
      float colFade = sin(t*.2)*.5+.5+story;
      col *= mix(vec3(1.), vec3(.8, .9, 1.3), colFade);	// subtle color shift
      float fade = smoothstep(0., 10., T);							// fade in at the start
      float lightning = sin(t*sin(t*10.));				// lighting flicker
      lightning *= pow(max(0., sin(t+sin(t))), 10.);		// lightning flash
      col *= 1.+lightning*fade*mix(1., .1, story*story);	// composite lightning
      col *= 1.-dot(UV-=.5, UV);							// vignette
      											
      #if HAS_HEART
      	col = mix(pow(col, vec3(1.2)), col, heart);
      	fade *= smoothstep(102., 97., T);
      #endif
      
      col *= fade;										// composite start and end fade
    #endif
    
    //col = vec3(heart);
    gl_FragColor = vec4(col, 1.);
  }
}%
